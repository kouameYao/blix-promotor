---
alwaysApply: true
---

# üß≠ PAYNAH-B2C ‚Äî R√®gles de Structure du Projet

## üß± Niveau Racine

- Le projet utilise **Next.js 14 (App Router)** avec TypeScript, Shadcn UI et Better Auth.
- Architecture **modulaire bas√©e sur les fonctionnalit√©s** avec s√©paration claire des responsabilit√©s.
- Code propre, typ√© et maintenable avec des imports absolus (`@/components`, `@/hooks`, etc.).
- Point d'entr√©e principal : `/app`.
- **Stack principal** : Next.js 14 + TypeScript + Tailwind CSS v4 + Zustand + Better Auth + React Query + i18n.

---

## üìÅ .cursor/rules

> üß† Configuration du Comportement IA  
> Contient les r√®gles IA pour guider la g√©n√©ration de code, le refactoring et les explications.  
> **Importance √©lev√©e** ‚Äî d√©finit comment l'IA doit se comporter dans le codebase.

---

## üìÅ .husky

> ‚öôÔ∏è Git Hooks  
> Automatise les t√¢ches pre-commit et pre-push (linting, v√©rifications de types).  
> **Importance faible** pour la g√©n√©ration de code IA, mais ne jamais supprimer ou modifier sauf ajout de hooks.

---

## üìÅ app

> üß© R√©pertoire Next.js App Router  
> Contient toutes les routes et layouts pour le frontend.  
> **Importance tr√®s √©lev√©e** ‚Äî base de tout le routage et rendu UI.

### `/app/layout.tsx`

- Layout global (s'applique √† toutes les pages).
- Encapsule les providers, styles globaux et m√©tadonn√©es.
- **CRITIQUE** : Ne jamais supprimer les providers existants sans instruction explicite.

### `/app/globals.css`

- Styles Tailwind globaux et resets.
- Utilis√© dans toute l'application.
- Contient la configuration de la police Aeonik.

### `/app/[local]/(public)`

- Pages publiques sp√©cifiques √† la locale (login, register, kyc-docs, etc.).
- Structure peut diff√©rer selon la langue ou r√©gion.
- **Pattern** : Utiliser les composants de `features/auth/components` pour la logique.

### `/app/[local]/dashboard`

- Routes pour utilisateurs authentifi√©s.
- Doit importer les composants de `features/dashboard` pour la logique et `components/` pour l'UI.
- **Important** : √©viter la logique lourde directement dans les pages ‚Äî d√©l√©guer aux `features`.

---

## üìÅ components

> üé® Composants UI r√©utilisables  
> Composants visuels bas√©s sur Shadcn ou personnalis√©s partag√©s entre fonctionnalit√©s.  
> Exemples : `Button`, `Card`, `Modal`, `DataTable`, `StepperCard`.  
> **Importance √©lev√©e** pour la coh√©rence UI.

### Structure attendue :

- `ui/` ‚Üí Composants Shadcn de base
- `common/` ‚Üí Composants communs (stepper-card, etc.)
- `shared/` ‚Üí Composants partag√©s
- `react-hook-form/` ‚Üí Composants de formulaires

---

## üìÅ constants

> üìö Valeurs de configuration statiques  
> Inclut les enums, constantes syst√®me et labels app-wide.  
> Ne doit pas contenir de logique ‚Äî seulement des valeurs export√©es.

---

## üìÅ features

> üß© Fonctionnalit√©s sp√©cifiques au domaine  
> Chaque dossier = une zone fonctionnelle (ex. `auth`, `dashboard`, `missions`, etc.).  
> Encapsule ses propres :

- `components` ‚Üí UI sp√©cifique √† la fonctionnalit√©
- `api` ‚Üí logique d'acc√®s aux donn√©es
- `constants` ‚Üí constantes locales
- `types` ‚Üí types au niveau fonctionnalit√© (voir ci-dessous)
- `utils` ‚Üí fonctions utilitaires

**Importance tr√®s √©lev√©e** ‚Äî la logique m√©tier principale vit ici.

### üßæ R√®gles des Types au Niveau Fonctionnalit√©

- Chaque fonctionnalit√© doit contenir un dossier `types/` si elle d√©finit des **types, interfaces ou enums** utilis√©s uniquement dans cette fonctionnalit√©.
- Les types locaux **ne doivent pas √™tre d√©clar√©s globalement**.
- R√®gle d'ordre d'import :
  - Utiliser les types locaux depuis `@/features/[feature]/types`.
  - Utiliser les types partag√©s/globaux depuis `@/types`.

### Exemple de structure auth :

```
features/auth/
‚îú‚îÄ‚îÄ components/     # LoginFlow, PhoneLoginForm, etc.
‚îú‚îÄ‚îÄ api/           # login.ts, etc.
‚îú‚îÄ‚îÄ types/         # auth.ts avec LoginCredentials, etc.
‚îú‚îÄ‚îÄ utils/         # schema.ts avec validation Zod
‚îî‚îÄ‚îÄ constants/     # index.ts
```

---

## üìÅ hooks

> ü™ù Hooks React personnalis√©s globaux  
> Logique r√©utilisable cross-fonctionnalit√© (ex. `useAuth`, `useDebounce`, `useModal`).  
> **Importance √©lev√©e** pour le comportement de l'app et l'interactivit√©.

### Hooks existants :

- `use-auth.ts` ‚Üí Authentification
- `use-api.ts` ‚Üí Appels API
- `use-mobile.tsx` ‚Üí D√©tection mobile
- `use-query-params.ts` ‚Üí Gestion √©tat URL avec nuqs

---

## üìÅ lib

> üß† Utilitaires et biblioth√®ques core  
> Logique partag√©e (ex. clients API, authentification, formatage, analytics).  
> Doit √™tre agnostique au framework.  
> **Importance √©lev√©e** pour la communication backend et int√©grations.

### Fichiers cl√©s :

- `auth.ts` ‚Üí Configuration Better Auth
- `api-client.ts` ‚Üí Client API
- `react-query.ts` ‚Üí Configuration React Query
- `utils.ts` ‚Üí Utilitaires g√©n√©raux

---

## üìÅ locales

> üåç Traductions i18n  
> Contient les fichiers JSON de traduction et config langue.  
> **Importance moyenne**, mais critique pour le support multi-langue.

### Structure :

- `en.ts` / `fr.ts` ‚Üí Traductions par langue
- `client.ts` / `server.ts` ‚Üí Hooks i18n
- `types.ts` ‚Üí Types de traduction

---

## üìÅ providers

> üß© Providers de contexte globaux  
> Contient les wrappers de contexte pour Theme, Auth, QueryClient, etc.  
> Utilis√© dans `/app/layout.tsx` pour initialiser le contexte.  
> **Importance √©lev√©e** ‚Äî modifie le comportement au niveau app.

### Providers existants :

- `auth-provider.tsx` ‚Üí Better Auth
- `react-query-provider.tsx` ‚Üí TanStack Query
- `nuqs-provider.tsx` ‚Üí Gestion √©tat URL
- `steps-provider.tsx` ‚Üí Gestion des √©tapes

---

## üìÅ routes

> üó∫Ô∏è Routes programmatiques  
> D√©finitions de routes centralis√©es, redirections et guards.  
> **Importance moyenne-√©lev√©e**, am√©liore la maintenabilit√©.

---

## üìÅ store

> ‚ö° Stores Zustand  
> Gestion d'√©tat globale.  
> Chaque store g√®re un domaine (auth, UI, credits, etc.).  
> **Importance tr√®s √©lev√©e** pour la logique UI bas√©e sur l'√©tat.

### Stores existants :

- `auth-store.ts` ‚Üí Authentification avec persistence
- `ui-store.ts` ‚Üí √âtat UI (sidebar, theme)
- `steps-store.ts` ‚Üí Gestion des √©tapes de processus

---

## üìÅ styles

> üé® Configuration du th√®me  
> Contient la config Tailwind, variables, animations et SCSS global si n√©cessaire.  
> **Importance moyenne**, d√©finit la coh√©rence du design.

### Configuration sp√©cifique :

- Police Aeonik configur√©e
- Couleurs personnalis√©es (black, yellow, gray-50, etc.)
- Animations personnalis√©es (accordion, blink, caret-blink)

---

## üìÅ types

> üî§ D√©finitions TypeScript globales  
> Contient les **types partag√©s ou cross-fonctionnalit√©**.  
> R√®gles :

- D√©clarer seulement les **types utilis√©s dans plusieurs fonctionnalit√©s**.
- Ne jamais d√©clarer de types sp√©cifiques √† une fonctionnalit√© ici.
- Exemples : `User`, `Mission`, `SubscriptionPlan`, `Organization`.

**Importance √©lev√©e**, assure la s√©curit√© des types dans l'app.

---

## üìÅ utils

> üß∞ Fonctions utilitaires  
> Fonctions pures g√©n√©riques (formatage, validation, parsing).  
> **Importance moyenne-√©lev√©e** ‚Äî souvent utilis√©es par `features` et `lib`.

---

## ‚öôÔ∏è Autres Fichiers

### `.env.example`

Exemples de variables d'environnement.  
Ne jamais commiter `.env` avec des secrets.

### `.editorconfig`

R√®gles de formatage et indentation (garder coh√©rent).

### `.vscode`

Param√®tres sp√©cifiques au workspace (extensions, formatage).  
**Importance faible IA**, ne pas modifier automatiquement.

---

# üß© R√©sum√© des Directives IA

1. **Ne pas m√©langer UI et logique.**  
   ‚Üí UI dans `components`, logique dans `features`, config globale dans `lib`.

2. **Respecter les fronti√®res des dossiers.**  
   ‚Üí Le code `features/auth` ne doit pas d√©pendre de `features/dashboard`.

3. **Toujours utiliser les imports absolus (`@/‚Ä¶`)** au lieu de relatifs.

4. **Ne jamais supprimer les providers ou layout wrappers** sauf instruction explicite.

5. **Pr√©server la structure des stores Zustand** et conventions de nommage.

6. **Types Globaux vs Locaux**
   - Types globaux ‚Üí `/types`
   - Types locaux (feature-scoped) ‚Üí `/features/[feature]/types`
   - Ne jamais m√©langer les deux.

7. **Pour nouvelles fonctionnalit√©s**, r√©pliquer la structure dans `/features/[feature-name]/`.

8. **Respecter les patterns existants** :
   - Utiliser React Hook Form + Zod pour les formulaires
   - Utiliser Zustand pour l'√©tat global
   - Utiliser Better Auth pour l'authentification
   - Utiliser TanStack Query pour les donn√©es serveur
   - Utiliser nuqs pour l'√©tat URL

9. **Respecter la configuration Tailwind** :
   - Police Aeonik par d√©faut
   - Couleurs personnalis√©es du projet
   - Animations d√©finies dans la config

10. **Respecter l'internationalisation** :
    - Utiliser les hooks `useI18n` pour les traductions
    - Suivre la structure `[local]` dans les routes
    - Maintenir la coh√©rence des cl√©s de traduction

---

> üß† Cette structure assure clart√©, modularit√© et scalabilit√© pour PAYNAH-B2C.  
> Cursor doit toujours respecter ces priorit√©s lors de la g√©n√©ration ou modification de code.
