---
alwaysApply: true
---

description: R√®gles Tailwind CSS et bonnes pratiques UI pour PAYNAH-B2C
globs: **/\*.css, **/_.tsx, \*\*/_.jsx, tailwind.config.js, tailwind.config.ts

---

# üé® R√®gles Tailwind CSS pour PAYNAH-B2C

## üèóÔ∏è Configuration du Projet

### Configuration Tailwind v4

- Utiliser la configuration Tailwind CSS v4 avec les plugins appropri√©s
- Configurer l'extension de th√®me correctement avec les couleurs PAYNAH
- Configurer le syst√®me de purge pour optimiser la production
- Int√©grer les plugins n√©cessaires (@tailwindcss/container-queries, tailwindcss-animate)
- Configurer les espacements et breakpoints personnalis√©s
- Configurer la palette de couleurs sp√©cifique au projet

### Police Aeonik

- **Police principale** : Aeonik (toutes les variantes disponibles)
- Utiliser `font-sans` pour la police par d√©faut
- Variantes disponibles : Thin, Air, Light, Regular, Medium, Bold, Black (+ Italic)
- Configuration dans `styles/fonts.css` et `app/globals.css`

---

## üé® Styling des Composants

### Classes utilitaires vs CSS personnalis√©

- Pr√©f√©rer les classes utilitaires Tailwind aux CSS personnalis√©s
- Utiliser `@apply` pour grouper les utilitaires li√©s quand n√©cessaire
- Utiliser les utilitaires de design responsive appropri√©s
- Impl√©menter le mode sombre correctement avec les variants
- Utiliser les variants d'√©tat appropri√©s (hover, focus, active, disabled)
- Maintenir la coh√©rence des styles de composants

### Composants Shadcn/UI

- Utiliser les composants Shadcn/UI comme base
- √âtendre les composants avec les variants CVA (Class Variance Authority)
- Maintenir la coh√©rence des variants de composants
- Impl√©menter les animations appropri√©es avec `tailwindcss-animate`
- Utiliser les utilitaires de transition appropri√©s
- Garder l'accessibilit√© en t√™te

---

## üìê Layout

### Flexbox et Grid

- Utiliser efficacement les utilitaires Flexbox et Grid
- Impl√©menter le syst√®me d'espacement coh√©rent
- Utiliser les container queries quand n√©cessaire
- Impl√©menter les breakpoints responsive appropri√©s
- Utiliser les utilitaires de padding et margin appropri√©s
- Impl√©menter les utilitaires d'alignement appropri√©s

### Responsive Design

- Approche mobile-first obligatoire
- Impl√©menter les breakpoints : `sm:`, `md:`, `lg:`, `xl:`, `2xl:`
- Utiliser efficacement les container queries
- G√©rer correctement les diff√©rentes tailles d'√©cran
- Impl√©menter la typographie responsive
- Utiliser l'espacement responsive appropri√©

---

## üî§ Typographie

### Syst√®me de polices

- Utiliser les utilitaires de taille de police appropri√©s
- Impl√©menter la hauteur de ligne appropri√©e
- Utiliser les utilitaires de poids de police appropri√©s
- Configurer correctement les polices personnalis√©es (Aeonik)
- Utiliser l'alignement de texte appropri√©
- Impl√©menter la d√©coration de texte appropri√©e

### Hi√©rarchie typographique

- Respecter la hi√©rarchie visuelle avec les tailles appropri√©es
- Utiliser les couleurs de texte coh√©rentes avec le design system
- Maintenir la lisibilit√© sur tous les supports

---

## üé® Couleurs PAYNAH

### Palette de couleurs sp√©cifique

```css
/* Couleurs principales PAYNAH */
black: {
  DEFAULT: '#000000',
  light: '#171511'
}
gray-50: '#f8f8f8'
yellow: '#f3b01d'  /* Couleur accent */
gray-100: '#707070'
```

### Utilisation des couleurs

- Utiliser la nomenclature s√©mantique des couleurs
- Impl√©menter le contraste de couleurs appropri√©
- Utiliser efficacement les utilitaires d'opacit√©
- Configurer correctement les couleurs personnalis√©es
- Utiliser les utilitaires de d√©grad√© appropri√©s
- Impl√©menter les √©tats hover appropri√©s

### Couleurs s√©mantiques

- `text-black` pour le texte principal
- `text-gray-100` pour le texte secondaire
- `bg-yellow` pour les √©l√©ments d'accent
- `bg-gray-50` pour les arri√®re-plans subtils

---

## üß© Composants

### Composants StepperCard

- Utiliser les composants `StepperCard` pour les processus multi-√©tapes
- Respecter la structure des props d√©finie dans `types.ts`
- Impl√©menter la navigation entre √©tapes correctement
- Maintenir la coh√©rence visuelle des √©tapes

### Composants de formulaires

- Utiliser les composants `react-hook-form` pour les formulaires
- Int√©grer avec Zod pour la validation
- Maintenir la coh√©rence des styles de formulaires
- Impl√©menter les √©tats d'erreur et de validation appropri√©s

### Composants d'authentification

- Respecter les patterns d√©finis dans `features/auth/components`
- Utiliser les composants `LoginFlow`, `PhoneLoginForm`, etc.
- Maintenir la coh√©rence avec le design system

---

## üì± Design Responsive

### Approche Mobile-First

- Commencer par le design mobile
- Utiliser les breakpoints progressifs
- Tester sur diff√©rentes tailles d'√©cran
- Optimiser pour les interactions tactiles

### Breakpoints PAYNAH

- `sm:` - 640px et plus
- `md:` - 768px et plus
- `lg:` - 1024px et plus
- `xl:` - 1280px et plus
- `2xl:` - 1536px et plus

---

## ‚ö° Performance

### Optimisation Tailwind

- Utiliser la configuration de purge appropri√©e
- Minimiser le CSS personnalis√©
- Utiliser les strat√©gies de cache appropri√©es
- Impl√©menter le code splitting appropri√©
- Optimiser pour la production
- Surveiller la taille du bundle

### Bonnes pratiques

- √âviter les classes utilitaires redondantes
- Utiliser les classes compos√©es quand appropri√©
- Optimiser les animations et transitions
- Minimiser les re-renders avec les classes conditionnelles

---

## üé≠ Animations PAYNAH

### Animations personnalis√©es

```css
/* Animations d√©finies dans tailwind.config.js */
'accordion-down':'accordion-down0.2sease-out''accordion-up':'accordion-up0.2sease-out''caret-blink':'caret-blink1.25sease-outinfinite'blink: 'blink 1s infinite';
```

### Utilisation des animations

- Utiliser `animate-accordion-down` pour les accord√©ons
- Utiliser `animate-caret-blink` pour les curseurs de saisie
- Utiliser `animate-blink` pour les √©l√©ments d'attention
- Maintenir la coh√©rence des dur√©es d'animation

---

## ‚ôø Accessibilit√©

### Bonnes pratiques d'accessibilit√©

- Utiliser les couleurs avec un contraste appropri√©
- Impl√©menter les √©tats focus visibles
- Utiliser les utilitaires d'accessibilit√© Tailwind
- Tester avec les lecteurs d'√©cran
- Maintenir la navigation au clavier
- Utiliser les attributs ARIA appropri√©s

### Contraste des couleurs

- V√©rifier le contraste avec les couleurs PAYNAH
- Utiliser les outils de v√©rification de contraste
- Maintenir la lisibilit√© sur tous les arri√®re-plans

---

## üß™ Bonnes Pratiques

### Conventions de nommage

- Utiliser des noms de classes descriptifs
- Maintenir la coh√©rence dans la nomenclature
- Documenter les composants complexes
- Utiliser les conventions de Tailwind

### Organisation des styles

- Garder les styles organis√©s par composant
- Utiliser les fichiers CSS modulaires quand n√©cessaire
- Maintenir la s√©paration entre styles globaux et composants
- Documenter les styles personnalis√©s

### Tests et validation

- Tester sur diff√©rents navigateurs
- Valider avec les outils de d√©veloppement
- Tester la responsivit√©
- V√©rifier les performances

---

## üîß Outils et Extensions

### Extensions VSCode recommand√©es

- Tailwind CSS IntelliSense
- Prettier
- ESLint
- Error Lens
- Path Intellisense

### Configuration VSCode

- Format on save avec Prettier
- Auto-fix ESLint
- IntelliSense Tailwind activ√©
- Version TypeScript workspace

---

## üìö Ressources PAYNAH

### Documentation sp√©cifique

- Consulter `tailwind.config.js` pour la configuration compl√®te
- R√©f√©rencer `app/globals.css` pour les styles globaux
- Utiliser `styles/fonts.css` pour la configuration des polices
- Suivre les patterns dans `components/ui/` pour les composants de base

### Int√©gration avec le stack

- Utiliser avec Shadcn/UI pour les composants de base
- Int√©grer avec CVA pour les variants de composants
- Utiliser avec `clsx` et `tailwind-merge` pour la gestion des classes
- Maintenir la coh√©rence avec le syst√®me de design PAYNAH
